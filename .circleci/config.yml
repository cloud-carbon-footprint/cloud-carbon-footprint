version: 2.1
orbs:
  node: circleci/node@4.0.0
  gcr: circleci/gcp-gcr@0.8.0
  gcp-cli: circleci/gcp-cli@1.8.4
jobs:
  lint-test:
    working_directory: ~/cloud-carbon-footprint
    docker:
      - image: circleci/node:current
    environment:
      MAJOR_REVISION: 0
      MINOR_REVISION: 0
      GIT_HASH: <<pipeline.git.revision>>
    # Currently, the cache is commented out since it's slower than installing dependencies every time. Once the
    # dependency list grows and build time increases, we can start using the cache again. Caching takes about ~30s to
    # resolve and use as of this comment.
    steps:
      - checkout
      - attach_workspace:
          at: ~/cloud-carbon-footprint
      # - restore_cache:
      #     key: dependency-cache-{{ checksum "package-lock.json" }}-{{ checksum "client/package-lock.json" }}-{{ checksum "server/package-lock.json" }}
      - run:
          name: setup
          command: '[ ! -d node_modules ] && npm run bootstrap || echo NPM packages unchanged. Using cache.'
      # - save_cache:
      #     key: dependency-cache-{{ checksum "package-lock.json" }}-{{ checksum "client/package-lock.json" }}-{{ checksum "server/package-lock.json" }}
      #     paths:
      #       - ./node_modules
      #       - ./client/node_modules
      #       - ./server/node_modules
      - run:
          name: lint
          command: 'npm run lint'
      - run:
          name: test
          command: 'npm test'
  build-client:
    description: Build Client
    working_directory: ~/cloud-carbon-footprint
    machine:
      image: ubuntu-1604:202007-01
    steps:
      - checkout
      - attach_workspace:
          at: ~/cloud-carbon-footprint
      - run:
          name: build
          command: |
            cd client
            npm ci
            npm run-script build
      - persist_to_workspace:
          root: ~/cloud-carbon-footprint
          paths:
            - client/build/*
            - client/.env
  build-server:
    description: Build Server
    working_directory: ~/cloud-carbon-footprint
    machine:
      image: ubuntu-1604:202007-01
    steps:
      - checkout
      - attach_workspace:
          at: ~/cloud-carbon-footprint
      - run:
          name: build
          command: |
            cd server
            npm ci
            npm run-script build
            ./create_server_env_file.sh
      - persist_to_workspace:
          root: ~/cloud-carbon-footprint
          paths:
            - server/dist/*
            - server/.env
  gcloud-init:
    description: Initialize Google Cloud SDK
    working_directory: ~/cloud-carbon-footprint
    docker:
      - image: hashicorp/terraform:0.12.28
    steps:
      - attach_workspace:
          at: ~/cloud-carbon-footprint
      - run:
          name: gcloud-init
          command: |
            apk add --update python3 py-crcmod bash libc6-compat curl
            export PATH=$PATH:/root/google-cloud-sdk/bin
            curl -sSL https://sdk.cloud.google.com > /tmp/gcloud-install && bash /tmp/gcloud-install --disable-prompts --install-dir=/root

            # Store service account
            echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json

            # Initialize gcloud CLI
            gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json

            gcloud --quiet config set project $GOOGLE_PROJECT_ID

            gcloud --quiet config set compute/zone $GOOGLE_COMPUTE_ZONE
  staging-deploy:
    description: Deploy app to gcp staging
    working_directory: ~/cloud-carbon-footprint
    docker:
      - image: hashicorp/terraform:0.12.28
    steps:
      - checkout
      - attach_workspace:
          at: ~/cloud-carbon-footprint
      - run:
          name: staging-deploy
          command: |
            # Create client env file
            cd client
            ./create_client_stage_env_file.sh
            cd ..
            cd appengine
            ./deploy-staging.sh
            cd ..
  prod-deploy:
    description: Deploy app to gcp prod
    working_directory: ~/cloud-carbon-footprint
    docker:
      - image: hashicorp/terraform:0.12.28
    steps:
      - checkout
      - attach_workspace:
          at: ~/cloud-carbon-footprint
      - run:
          name: prod-deploy
          command: |
            # Create client env file
            cd client
            ./create_client_prod_env_file.sh
            cd ..
            cd appengine
            ./deploy-production.sh
            cd ..

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - lint-test
      - build-client:
          requires:
            - lint-test
      - build-server:
          requires:
            - lint-test
      - gcloud-init:
          requires:
            - build-client
            - build-server
      - staging-deploy:
          filters:
            branches:
              only: production-pipeline
          requires:
            - gcloud-init
      - hold:
          type: approval
          requires:
            - staging-deploy
      - prod-deploy:
          filters:
            branches:
              only: production-pipeline
          requires:
            - hold
